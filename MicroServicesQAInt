 General Microservices Concepts

1. What are microservices, and how do they differ from monolithic architecture?

    Microservices are small, independent, and loosely coupled services designed for specific functionalities. 
Unlike monolithic architectures, where all modules are tightly integrated, microservices operate as independent entities that communicate over APIs.

2. What are the advantages and disadvantages of microservices?

    Advantages: Scalability, fault isolation, technology diversity, faster deployment.
    Disadvantages: Increased complexity, inter-service communication challenges, and potential performance overhead.

3. What are the key characteristics of microservices architecture?

    Loose coupling, high cohesion, decentralized data management, fault isolation, and scalability.

4. How do you identify and design microservices in an application?

    Break down the application into distinct business domains using Domain-Driven Design (DDD). Each domain or subdomain can map to a microservice.

5. What is Domain-Driven Design (DDD), and how does it relate to microservices?

    DDD focuses on the business domain and aligns software with it. Bounded contexts in DDD often correspond to individual microservices.

6. How do you ensure loose coupling and high cohesion in microservices?

    Define clear APIs, use messaging systems, and ensure each microservice has a single responsibility and its own database.

---

 Communication in Microservices

7. What are the different ways microservices communicate with each other?

    Synchronous: REST, gRPC.
    Asynchronous: Messaging queues like RabbitMQ, Kafka.

8. What is the difference between synchronous and asynchronous communication?

    Synchronous: Real-time communication; blocks until a response is received.
    Asynchronous: Communication happens in the background; does not block the sender.

9. How do you implement inter-service communication in microservices?

    Use REST for synchronous communication or message brokers like Kafka for asynchronous communication.

10. What is a message broker, and when would you use one in microservices?

     A message broker facilitates asynchronous communication. Use it for decoupling services and handling long-running tasks.

11. How do you handle service-to-service communication failures?

     Implement retries, circuit breakers (e.g., Resilience4j), and fallback mechanisms.

12. What are the pros and cons of using REST, gRPC, and messaging queues in microservices?

     REST: Easy to use, widely supported, but may have higher latency.
     gRPC: Efficient, uses protocol buffers, but requires more setup.
     Messaging queues: Decouples services, ensures reliability, but adds complexity.

---

 Spring Boot and Spring Cloud

13. How do you implement microservices using Spring Boot?

     Use Spring Boot for service creation and Spring Cloud for distributed systems features like service discovery and configuration management.

14. What is Spring Cloud, and how does it support microservices?

     Spring Cloud provides tools for service discovery, configuration management, and resilience patterns.

15. How do you implement service discovery using Eureka or Consul?

     Include `spring-cloud-starter-netflix-eureka-client` dependency and configure Eureka in `application.properties`. Consul works similarly.

16. What is Spring Cloud Config, and how does it help with configuration management?

     Spring Cloud Config provides centralized configuration management using a Git repository or other backends.

17. How do you secure microservices with Spring Security and OAuth2?

     Use OAuth2 for token-based authentication and Spring Security for role-based access control.

18. How do you implement resilience using Resilience4j or Hystrix?

     Use annotations like `@CircuitBreaker` or `@Retry` from Resilience4j for resilience patterns. Hystrix is older but provides similar features.

---

 Database Management

19. What is the database-per-service pattern, and why is it important?

     Each microservice has its own database to ensure loose coupling and data independence.

20. How do you handle data consistency in microservices?

     Use eventual consistency patterns like the Saga pattern or event-driven architectures.

21. What is the Saga pattern, and how is it implemented?

     A Saga is a sequence of transactions that ensures consistency across services. It can be implemented with orchestration or choreography.

22. How do you manage distributed transactions in microservices?

     Avoid distributed transactions by using patterns like Saga or compensating transactions.

23. What are the differences between Orchestration and Choreography in distributed systems?

     Orchestration: A central coordinator manages transactions.
     Choreography: Services react to events from other services.

---

 Resilience and Fault Tolerance

24. What is a circuit breaker, and how do you implement it?

     A circuit breaker prevents calls to a failing service. Implement using Resilience4j.

25. How do you ensure fault tolerance and resilience in microservices?

     Use retries, circuit breakers, timeouts, and bulkheads.

26. What is the bulkhead pattern, and how is it used?

     Isolates system components to prevent a single failure from affecting the entire system.

27. How do you implement retry and timeout mechanisms?

     Use Resilience4j's `@Retry` and timeout configurations.

28. How do you handle cascading failures in microservices?

     Implement circuit breakers, bulkheads, and fallback methods.

---

 Scalability and Deployment

29. How do you scale microservices horizontally and vertically?

     Horizontal: Add more instances.
     Vertical: Increase resources (CPU, memory) of existing instances.

30. What is containerization, and why is it important for microservices?

     Containerization encapsulates microservices with their dependencies, ensuring consistency across environments.

31. What is Kubernetes, and how does it support microservices deployment?

     Kubernetes automates deployment, scaling, and management of containerized applications.

32. How do you use Docker to containerize microservices?

     Create a `Dockerfile` and build the image using `docker build`.

33. What are Kubernetes Pods, Services, and Deployments?

     Pods: Smallest deployable unit.
     Services: Expose Pods.
     Deployments: Manage deployment of Pods.

34. How do you deploy microservices with CI/CD pipelines?

     Use tools like Jenkins, GitLab CI/CD, or GitHub Actions to automate build, test, and deployment.

---

 Monitoring and Logging

35. How do you monitor microservices?

     Use tools like Prometheus, Grafana, and Spring Boot Actuator.

36. What tools do you use for distributed tracing in microservices?

     Tools like Zipkin or Jaeger.

37. How do you implement centralized logging for microservices?

     Use ELK Stack (Elasticsearch, Logstash, Kibana) or Fluentd.

38. What are some tools for monitoring and observability in microservices?

     Prometheus, Grafana, ELK Stack, Jaeger, or Zipkin.

39. How do you handle log correlation in distributed systems?

     Use unique trace IDs or correlation IDs passed through service calls.

---

 API Management

40. What is an API Gateway, and why is it used in microservices?

     An API Gateway acts as a single entry point, managing requests, routing, and security.

41. What are the responsibilities of an API Gateway (e.g., routing, load balancing)?

     Handles request routing, load balancing, rate limiting, and authentication.

42. What are some popular API Gateway tools (e.g., Zuul, Spring Cloud Gateway)?

     Zuul, Spring Cloud Gateway, Kong, or NGINX.

43. How do you handle API versioning in microservices?

     Use URI versioning (e.g., `/v1/resource`) or header-based versioning.

44. How do you ensure backward compatibility for APIs?

     Use versioning and maintain older API versions until clients migrate.

---

 Advanced Topics

45. What are idempotent operations, and why are they important in microservices?

     Idempotent operations produce the same result when executed multiple times. They are important for retries.

46. What is eventual consistency, and how do you implement it?

     Eventual consistency ensures data consistency over time. Use event-driven architectures.

47. How do you secure communication between microservices?

     Use HTTPS, OAuth2, and mutual TLS.

48. What is the role of gRPC in microservices?

     gRPC is a high-performance RPC framework supporting protocol buffers.

49. What is a sidecar pattern, and how is it used in microservices?

     A sidecar is a helper container for services (e.g., for logging or monitoring).

50. What is the difference between client-side and server-side load balancing?

     Client-side: The client decides where to route requests (e.g., Ribbon).
     Server-side: A central load balancer (e.g., NGINX) routes requests.

